/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => Hyphenation
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var Hyphenation = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.clearLang = () => {
      for (const el of this.elements(document.body)) {
        el.removeAttribute("lang");
      }
    };
    this.elements = (containerEl) => {
      const preview = containerEl.getElementsByClassName("markdown-preview-view");
      const live = containerEl.getElementsByClassName("is-live-preview");
      return Array.from(preview).concat(Array.from(live));
    };
    this.activeLeafChange = (leaf) => {
      var _a;
      if (!leaf) {
        return;
      }
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile || activeFile.extension != "md") {
        return;
      }
      const cache = this.app.metadataCache.getFileCache(activeFile);
      const lang = ((_a = cache == null ? void 0 : cache.frontmatter) == null ? void 0 : _a["lang"]) || navigator.language;
      this.setLang(leaf.view.containerEl, lang);
    };
    this.setLang = (containerEl, lang) => {
      for (const el of this.elements(containerEl)) {
        el.setAttribute("lang", lang);
      }
    };
  }
  async onload() {
    this.app.workspace.onLayoutReady(() => {
      this.registerEvent(this.app.workspace.on("active-leaf-change", this.activeLeafChange));
    });
  }
  onunload() {
    this.clearLang();
  }
};
